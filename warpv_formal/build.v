`line 2 "repos/warp-v/warp-v.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.9-2018/02/11-beta
`include "sp_default.vh" //_\SV
   // -----------------------------------------------------------------------------
   // Copyright (c) 2017, Steven F. Hoover
   // 
   // Redistribution and use in source and binary forms, with or without
   // modification, are permitted provided that the following conditions are met:
   // 
   //     * Redistributions of source code must retain the above copyright notice,
   //       this list of conditions and the following disclaimer.
   //     * Redistributions in binary form must reproduce the above copyright
   //       notice, this list of conditions and the following disclaimer in the
   //       documentation and/or other materials provided with the distribution.
   //     * The name Steven F. Hoover
   //       may not be used to endorse or promote products derived from this software
   //       without specific prior written permission.
   // 
   // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
   // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
   // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
   // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
   // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   // -----------------------------------------------------------------------------

   // This code is mastered in https://github.com/stevehoover/warp-v.git

//_\SV
   module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */
`line 583 "repos/warp-v/warp-v.tlv" 1
//_\SV
/* verilator lint_on WIDTH */  // Let's be strict about bit widths.






`line 1398 "repos/warp-v/warp-v.tlv" 1
`include "build_gen.v" //_\TLV
   // =================
   //
   //    THE MODEL
   //
   // =================
   
   `line 1250 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1405 as: m4+cpu()
      
      // Generated logic
      `line 817 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1252 as: m4+indirect(M4_isa['_gen'])
         
         // v---------------------
         // Instruction characterization
      
         // M4 ugliness for instruction characterization.
         
         // For each opcode[6:2]
         // (User ISA Manual 2.2, Table 19.1)
         // Associate opcode[6:2] ([1:0] are 2'b11) with mnemonic and instruction type.
         // Instruction type is not in the table, but there seems to be a single instruction type for each of these,
         // so that is mapped here as well.
         // op5(bits, type, mnemonic)
         /*SV_plus*/
            localparam [4:0] OP5_LOAD = 5'b00000;
            localparam [4:0] OP5_LOAD_FP = 5'b00001;
            localparam [4:0] OP5_CUSTOM_0 = 5'b00010;
            localparam [4:0] OP5_MISC_MEM = 5'b00011;
            localparam [4:0] OP5_OP_IMM = 5'b00100;
            localparam [4:0] OP5_AUIPC = 5'b00101;
            localparam [4:0] OP5_OP_IMM_32 = 5'b00110;
            localparam [4:0] OP5_48B1 = 5'b00111;
            localparam [4:0] OP5_STORE = 5'b01000;
            localparam [4:0] OP5_STORE_FP = 5'b01001;
            localparam [4:0] OP5_CUSTOM_1 = 5'b01010;
            localparam [4:0] OP5_AMO = 5'b01011;  // (R-type, but rs2 = const for some, based on funct7 which doesn't exist for I-type?? R-type w/ ignored R2?)
            localparam [4:0] OP5_OP = 5'b01100;
            localparam [4:0] OP5_LUI = 5'b01101;
            localparam [4:0] OP5_OP_32 = 5'b01110;
            localparam [4:0] OP5_64B = 5'b01111;
            localparam [4:0] OP5_MADD = 5'b10000;
            localparam [4:0] OP5_MSUB = 5'b10001;
            localparam [4:0] OP5_NMSUB = 5'b10010;
            localparam [4:0] OP5_NMADD = 5'b10011;
            localparam [4:0] OP5_OP_FP = 5'b10100;  // (R-type, but rs2 = const for some, based on funct7 which doesn't exist for I-type?? R-type w/ ignored R2?)
            localparam [4:0] OP5_RESERVED_1 = 5'b10101;
            localparam [4:0] OP5_CUSTOM_2_RV128 = 5'b10110;
            localparam [4:0] OP5_48B2 = 5'b10111;
            localparam [4:0] OP5_BRANCH = 5'b11000;
            localparam [4:0] OP5_JALR = 5'b11001;
            localparam [4:0] OP5_RESERVED_2 = 5'b11010;
            localparam [4:0] OP5_JAL = 5'b11011;
            localparam [4:0] OP5_SYSTEM = 5'b11100;
            localparam [4:0] OP5_RESERVED_3 = 5'b11101;
            localparam [4:0] OP5_CUSTOM_3_RV128 = 5'b11110;
            localparam [4:0] OP5_80B = 5'b11111;
            
         /*SV_plus*/
            // Not sure these are ever used.
            localparam INSTR_TYPE_I_MASK = 0 | (1 << 5'b00000) | (1 << 5'b00001) | (1 << 5'b00100) | (1 << 5'b00110) | (1 << 5'b11001); localparam INSTR_TYPE_R_MASK = 0 | (1 << 5'b01100) | (1 << 5'b01110); localparam INSTR_TYPE_RI_MASK = 0 | (1 << 5'b01011) | (1 << 5'b10100); localparam INSTR_TYPE_R4_MASK = 0 | (1 << 5'b10000) | (1 << 5'b10001) | (1 << 5'b10010) | (1 << 5'b10011); localparam INSTR_TYPE_S_MASK = 0 | (1 << 5'b01000) | (1 << 5'b01001); localparam INSTR_TYPE_B_MASK = 0 | (1 << 5'b11000); localparam INSTR_TYPE_J_MASK = 0 | (1 << 5'b11011); localparam INSTR_TYPE_U_MASK = 0 | (1 << 5'b00101) | (1 << 5'b01101); localparam INSTR_TYPE___MASK = 0 | (1 << 5'b00010) | (1 << 5'b00011) | (1 << 5'b00111) | (1 << 5'b01010) | (1 << 5'b01111) | (1 << 5'b10101) | (1 << 5'b10110) | (1 << 5'b10111) | (1 << 5'b11010) | (1 << 5'b11100) | (1 << 5'b11101) | (1 << 5'b11110) | (1 << 5'b11111); 
            
         /*SV_plus*/
            // Instruction characterization.
            // (User ISA Manual 2.2, Table 19.2)
            // instr(type,  // (this is simply verified vs. op5)
            //       |  bit-width,
            //       |  |   extension, 
            //       |  |   |  opcode[6:2],  // (aka op5)
            //       |  |   |  |      func3,   // (if applicable)
            //       |  |   |  |      |    mnemonic)
            localparam [6:0] LUI_INSTR_OPCODE = 7'b0110111;
            localparam [6:0] AUIPC_INSTR_OPCODE = 7'b0010111;
            localparam [6:0] JAL_INSTR_OPCODE = 7'b1101111;
            localparam [6:0] JALR_INSTR_OPCODE = 7'b1100111; localparam [2:0] JALR_INSTR_FUNCT3 = 3'b000;
            localparam [6:0] BEQ_INSTR_OPCODE = 7'b1100011; localparam [2:0] BEQ_INSTR_FUNCT3 = 3'b000;
            localparam [6:0] BNE_INSTR_OPCODE = 7'b1100011; localparam [2:0] BNE_INSTR_FUNCT3 = 3'b001;
            localparam [6:0] BLT_INSTR_OPCODE = 7'b1100011; localparam [2:0] BLT_INSTR_FUNCT3 = 3'b100;
            localparam [6:0] BGE_INSTR_OPCODE = 7'b1100011; localparam [2:0] BGE_INSTR_FUNCT3 = 3'b101;
            localparam [6:0] BLTU_INSTR_OPCODE = 7'b1100011; localparam [2:0] BLTU_INSTR_FUNCT3 = 3'b110;
            localparam [6:0] BGEU_INSTR_OPCODE = 7'b1100011; localparam [2:0] BGEU_INSTR_FUNCT3 = 3'b111;
            localparam [6:0] LB_INSTR_OPCODE = 7'b0000011; localparam [2:0] LB_INSTR_FUNCT3 = 3'b000;
            localparam [6:0] LH_INSTR_OPCODE = 7'b0000011; localparam [2:0] LH_INSTR_FUNCT3 = 3'b001;
            localparam [6:0] LW_INSTR_OPCODE = 7'b0000011; localparam [2:0] LW_INSTR_FUNCT3 = 3'b010;
            localparam [6:0] LBU_INSTR_OPCODE = 7'b0000011; localparam [2:0] LBU_INSTR_FUNCT3 = 3'b100;
            localparam [6:0] LHU_INSTR_OPCODE = 7'b0000011; localparam [2:0] LHU_INSTR_FUNCT3 = 3'b101;
            localparam [6:0] SB_INSTR_OPCODE = 7'b0100011; localparam [2:0] SB_INSTR_FUNCT3 = 3'b000;
            localparam [6:0] SH_INSTR_OPCODE = 7'b0100011; localparam [2:0] SH_INSTR_FUNCT3 = 3'b001;
            localparam [6:0] SW_INSTR_OPCODE = 7'b0100011; localparam [2:0] SW_INSTR_FUNCT3 = 3'b010;
            localparam [6:0] ADDI_INSTR_OPCODE = 7'b0010011; localparam [2:0] ADDI_INSTR_FUNCT3 = 3'b000;
            localparam [6:0] SLTI_INSTR_OPCODE = 7'b0010011; localparam [2:0] SLTI_INSTR_FUNCT3 = 3'b010;
            localparam [6:0] SLTIU_INSTR_OPCODE = 7'b0010011; localparam [2:0] SLTIU_INSTR_FUNCT3 = 3'b011;
            localparam [6:0] XORI_INSTR_OPCODE = 7'b0010011; localparam [2:0] XORI_INSTR_FUNCT3 = 3'b100;
            localparam [6:0] ORI_INSTR_OPCODE = 7'b0010011; localparam [2:0] ORI_INSTR_FUNCT3 = 3'b110;
            localparam [6:0] ANDI_INSTR_OPCODE = 7'b0010011; localparam [2:0] ANDI_INSTR_FUNCT3 = 3'b111;
            localparam [6:0] SLLI_INSTR_OPCODE = 7'b0010011; localparam [2:0] SLLI_INSTR_FUNCT3 = 3'b001;
            localparam [6:0] SRLI_SRAI_INSTR_OPCODE = 7'b0010011; localparam [2:0] SRLI_SRAI_INSTR_FUNCT3 = 3'b101;  // Two instructions distinguished by an immediate bit, treated as a single instruction.
            localparam [6:0] ADD_SUB_INSTR_OPCODE = 7'b0110011; localparam [2:0] ADD_SUB_INSTR_FUNCT3 = 3'b000;  // Treated as a single instruction.
            localparam [6:0] SLL_INSTR_OPCODE = 7'b0110011; localparam [2:0] SLL_INSTR_FUNCT3 = 3'b001;
            localparam [6:0] SLT_INSTR_OPCODE = 7'b0110011; localparam [2:0] SLT_INSTR_FUNCT3 = 3'b010;
            localparam [6:0] SLTU_INSTR_OPCODE = 7'b0110011; localparam [2:0] SLTU_INSTR_FUNCT3 = 3'b011;
            localparam [6:0] XOR_INSTR_OPCODE = 7'b0110011; localparam [2:0] XOR_INSTR_FUNCT3 = 3'b100;
            localparam [6:0] SRL_SRA_INSTR_OPCODE = 7'b0110011; localparam [2:0] SRL_SRA_INSTR_FUNCT3 = 3'b101;  // Treated as a single instruction.
            localparam [6:0] OR_INSTR_OPCODE = 7'b0110011; localparam [2:0] OR_INSTR_FUNCT3 = 3'b110;
            localparam [6:0] AND_INSTR_OPCODE = 7'b0110011; localparam [2:0] AND_INSTR_FUNCT3 = 3'b111;
            //m4_instr(_, 32, I, 00011, 000, FENCE)
            //m4_instr(_, 32, I, 00011, 001, FENCE_I)
            //m4_instr(_, 32, I, 11100, 000, ECALL_EBREAK)  // Two instructions distinguished by an immediate bit, treated as a single instruction.
            //m4_instr(_, 32, I, 11100, 001, CSRRW)
            //m4_instr(_, 32, I, 11100, 010, CSRRS)
            //m4_instr(_, 32, I, 11100, 011, CSRRC)
            //m4_instr(_, 32, I, 11100, 101, CSRRWI)
            //m4_instr(_, 32, I, 11100, 110, CSRRSI)
            //m4_instr(_, 32, I, 11100, 111, CSRRCI)
            
            
            
            
              // Two instructions distinguished by an immediate bit, treated as a single instruction.
            
            
              // Two instructions distinguished by an immediate bit, treated as a single instruction.
              // Two instructions distinguished by an immediate bit, treated as a single instruction.
            
              // Two instructions distinguished by an immediate bit, treated as a single instruction.
            
            
            
            
            
            
            
            
            
            
            
            
            
            // RV32A and RV64A
            // NOT IMPLEMENTED. These are distinct in the func7 field.
            // RV32F and RV64F
            // NOT IMPLEMENTED.
            // RV32D and RV64D
            // NOT IMPLEMENTED.
      
      
         // ^---------------------
      //_\end_source
      `line 1253 "repos/warp-v/warp-v.tlv" 2
   
      // The program in an instruction memory.
      /*SV_plus*/
         logic [31:0] instrs [0:11-1];
      `line 795 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1257 as: m4+indirect(M4_isa['_cnt10_prog'])
         /*SV_plus*/
            logic [40*8-1:0] instr_strs [0:11];
            
            // /=====================\
            // | Count to 10 Program |
            // \=====================/
            //
            
            // Add 1,2,3,...,10 (in that order).
            // Store incremental results in memory locations 0..9. (1, 3, 6, 10, ...)
            //
            // Regs:
            // 1: cnt
            // 2: ten
            // 3: out
            // 4: tmp
            // 5: offset
            // 6: store addr
            
      //_\end_source
      `line 1258 "repos/warp-v/warp-v.tlv" 2
   
   
      // /=========\
      // | The CPU |
      // \=========/
      
      assign L0_reset_a0 = reset;
   
      //_|fetch
         //_/instr
            //_@0
               assign FETCH_Instr_reset_a0 = L0_reset_a0;
            
               assign FETCH_Instr_fetch_a0 = 1'b1;  // always fetch
               //_?$fetch
   
                  // =====
                  // Fetch
                  // =====
   
                  assign FETCH_Instr_raw_a0[31:0] = instrs[FETCH_Instr_Pc_a0[5:2]];
               
            //_@0
               // A returning load clobbers the instruction.
               // (Could do this with lower latency. Right now it goes through memory pipeline $ANY, and
               //  it is non-speculative. Both could easily be fixed.)
               assign FETCH_Instr_returning_ld_a0 = MEM_Data_valid_ld_a4;
               
               // =======
               // Next PC
               // =======
               
               assign FETCH_Instr_Pc_n1[29:2] =
                  FETCH_Instr_reset_a0 ? 28'b0 :
                  FETCH_Instr_valid_pred_taken_branch_a3 ? FETCH_Instr_branch_target_a3 :
                  FETCH_Instr_valid_mispred_branch_a3 ? FETCH_Instr_branch_target_a3 :
                  FETCH_Instr_valid_jump_a3 ? FETCH_Instr_jump_target_a3 :
                  FETCH_Instr_replay_a3 ? FETCH_Instr_Pc_a3 :
                  FETCH_Instr_returning_ld_a0 ? FETCH_Instr_Pc_a0[29:2] :  // Returning load, so next PC is the previous next PC (unless there was a branch that wasn't visible yet)
                           FETCH_Instr_Pc_a0 + 28'b1;
               
            //_@1
   
               // ======
               // DECODE
               // ======
   
               // Decode of the fetched instruction
               assign FETCH_Instr_valid_decode_a1 = FETCH_Instr_fetch_a1;  // Always decode if we fetch.
               `line 964 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1307 as: m4+indirect(M4_isa['_decode'])
                  //_?$valid_decode
               
                     // =================================
               
                     // Extract fields of $raw (instruction) into $raw_<field>[x:0].
                     assign {FETCH_Instr_raw_funct7_a1[6:0], FETCH_Instr_raw_rs2_a1[4:0], FETCH_Instr_raw_rs1_a1[4:0], FETCH_Instr_raw_funct3_a1[2:0], FETCH_Instr_raw_rd_a1[4:0], FETCH_Instr_raw_opcode_a1[6:0]} = FETCH_Instr_raw_a1;
                     `BOGUS_USE(FETCH_Instr_raw_funct7_a1)  // Delete once its used.
                     // Extract immediate fields into type-specific signals.
                     // (User ISA Manual 2.2, Fig. 2.4)
                     assign FETCH_Instr_raw_i_imm_a1[31:0] = {{21{FETCH_Instr_raw_a1[31]}}, FETCH_Instr_raw_a1[30:20]};
                     assign FETCH_Instr_raw_s_imm_a1[31:0] = {{21{FETCH_Instr_raw_a1[31]}}, FETCH_Instr_raw_a1[30:25], FETCH_Instr_raw_a1[11:7]};
                     assign FETCH_Instr_raw_b_imm_a1[31:0] = {{20{FETCH_Instr_raw_a1[31]}}, FETCH_Instr_raw_a1[7], FETCH_Instr_raw_a1[30:25], FETCH_Instr_raw_a1[11:8], 1'b0};
                     assign FETCH_Instr_raw_u_imm_a1[31:0] = {FETCH_Instr_raw_a1[31:12], {12{1'b0}}};
                     assign FETCH_Instr_raw_j_imm_a1[31:0] = {{12{FETCH_Instr_raw_a1[31]}}, FETCH_Instr_raw_a1[19:12], FETCH_Instr_raw_a1[20], FETCH_Instr_raw_a1[30:21], 1'b0};
                     // Extract other type/instruction-specific fields.
                     assign FETCH_Instr_raw_shamt_a1[6:0] = FETCH_Instr_raw_a1[26:20];
                     assign FETCH_Instr_raw_aq_a1 = FETCH_Instr_raw_a1[26];
                     assign FETCH_Instr_raw_rl_a1 = FETCH_Instr_raw_a1[25];
                     assign FETCH_Instr_raw_rs3_a1[4:0] = FETCH_Instr_raw_a1[31:27];
                     assign FETCH_Instr_raw_rm_a1[2:0] = FETCH_Instr_raw_funct3_a1;
                     `BOGUS_USE(FETCH_Instr_raw_shamt_a1 FETCH_Instr_raw_aq_a1 FETCH_Instr_raw_rl_a1 FETCH_Instr_raw_rs3_a1 FETCH_Instr_raw_rm_a1)  // Avoid "unused" messages. Remove these as they become used.
               
                     // Instruction type decode
                     /*SV_plus*/
                        assign FETCH_Instr_is_i_type_a1 = INSTR_TYPE_I_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_r_type_a1 = INSTR_TYPE_R_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_ri_type_a1 = INSTR_TYPE_RI_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_r4_type_a1 = INSTR_TYPE_R4_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_s_type_a1 = INSTR_TYPE_S_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_b_type_a1 = INSTR_TYPE_B_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_j_type_a1 = INSTR_TYPE_J_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is_u_type_a1 = INSTR_TYPE_U_MASK[FETCH_Instr_raw_opcode_a1[6:2]]; assign FETCH_Instr_is___type_a1 = INSTR_TYPE___MASK[FETCH_Instr_raw_opcode_a1[6:2]]; 
               
                     // Instruction decode.
                     assign FETCH_Instr_op5_funct3_a1[7:0] = {FETCH_Instr_raw_a1[6:2], FETCH_Instr_raw_funct3_a1};
                     `line 956 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 992 as: m4+riscv_decode_expr()
                        assign FETCH_Instr_is_lui_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01101_xxx);
                        assign FETCH_Instr_is_auipc_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00101_xxx);
                        assign FETCH_Instr_is_jal_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11011_xxx);
                        assign FETCH_Instr_is_jalr_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11001_000);
                        assign FETCH_Instr_is_beq_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11000_000);
                        assign FETCH_Instr_is_bne_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11000_001);
                        assign FETCH_Instr_is_blt_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11000_100);
                        assign FETCH_Instr_is_bge_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11000_101);
                        assign FETCH_Instr_is_bltu_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11000_110);
                        assign FETCH_Instr_is_bgeu_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b11000_111);
                        assign FETCH_Instr_is_lb_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00000_000);
                        assign FETCH_Instr_is_lh_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00000_001);
                        assign FETCH_Instr_is_lw_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00000_010);
                        assign FETCH_Instr_is_lbu_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00000_100);
                        assign FETCH_Instr_is_lhu_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00000_101);
                        assign FETCH_Instr_is_sb_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01000_000);
                        assign FETCH_Instr_is_sh_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01000_001);
                        assign FETCH_Instr_is_sw_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01000_010);
                        assign FETCH_Instr_is_addi_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_000);
                        assign FETCH_Instr_is_slti_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_010);
                        assign FETCH_Instr_is_sltiu_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_011);
                        assign FETCH_Instr_is_xori_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_100);
                        assign FETCH_Instr_is_ori_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_110);
                        assign FETCH_Instr_is_andi_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_111);
                        assign FETCH_Instr_is_slli_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_001);
                        assign FETCH_Instr_is_srli_srai_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b00100_101);
                        assign FETCH_Instr_is_add_sub_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_000);
                        assign FETCH_Instr_is_sll_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_001);
                        assign FETCH_Instr_is_slt_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_010);
                        assign FETCH_Instr_is_sltu_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_011);
                        assign FETCH_Instr_is_xor_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_100);
                        assign FETCH_Instr_is_srl_sra_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_101);
                        assign FETCH_Instr_is_or_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_110);
                        assign FETCH_Instr_is_and_instr_a1 = (FETCH_Instr_op5_funct3_a1 ==? 8'b01100_111);
                        
                     //_\end_source
                     `line 993 "repos/warp-v/warp-v.tlv" 2
               
                     assign FETCH_Instr_illegal_a1 = 1'b1 && ! FETCH_Instr_is_lui_instr_a1 && ! FETCH_Instr_is_auipc_instr_a1 && ! FETCH_Instr_is_jal_instr_a1 && ! FETCH_Instr_is_jalr_instr_a1 && ! FETCH_Instr_is_beq_instr_a1 && ! FETCH_Instr_is_bne_instr_a1 && ! FETCH_Instr_is_blt_instr_a1 && ! FETCH_Instr_is_bge_instr_a1 && ! FETCH_Instr_is_bltu_instr_a1 && ! FETCH_Instr_is_bgeu_instr_a1 && ! FETCH_Instr_is_lb_instr_a1 && ! FETCH_Instr_is_lh_instr_a1 && ! FETCH_Instr_is_lw_instr_a1 && ! FETCH_Instr_is_lbu_instr_a1 && ! FETCH_Instr_is_lhu_instr_a1 && ! FETCH_Instr_is_sb_instr_a1 && ! FETCH_Instr_is_sh_instr_a1 && ! FETCH_Instr_is_sw_instr_a1 && ! FETCH_Instr_is_addi_instr_a1 && ! FETCH_Instr_is_slti_instr_a1 && ! FETCH_Instr_is_sltiu_instr_a1 && ! FETCH_Instr_is_xori_instr_a1 && ! FETCH_Instr_is_ori_instr_a1 && ! FETCH_Instr_is_andi_instr_a1 && ! FETCH_Instr_is_slli_instr_a1 && ! FETCH_Instr_is_srli_srai_instr_a1 && ! FETCH_Instr_is_add_sub_instr_a1 && ! FETCH_Instr_is_sll_instr_a1 && ! FETCH_Instr_is_slt_instr_a1 && ! FETCH_Instr_is_sltu_instr_a1 && ! FETCH_Instr_is_xor_instr_a1 && ! FETCH_Instr_is_srl_sra_instr_a1 && ! FETCH_Instr_is_or_instr_a1 && ! FETCH_Instr_is_and_instr_a1;
                     assign FETCH_Instr_jump_a1 = FETCH_Instr_is_jalr_instr_a1;  // "Jump" in this code means absolute. "Jump" in RISC-V means unconditional.
                     assign FETCH_Instr_conditional_branch_a1 = FETCH_Instr_is_b_type_a1;
                     assign FETCH_Instr_branch_a1 = FETCH_Instr_is_b_type_a1 || FETCH_Instr_is_j_type_a1;
                     assign FETCH_Instr_ld_a1 = FETCH_Instr_raw_a1[6:3] == 4'b0;
                     assign FETCH_Instr_st_a1 = FETCH_Instr_is_s_type_a1;
                     `BOGUS_USE(FETCH_Instr_is___type_a1 FETCH_Instr_is_u_type_a1)
               
                     // Output signals.
                     for (src = 1; src <= 2; src++) begin : L1_FETCH_Instr_Src logic L1_is_reg_a1; logic [4:0] L1_reg_a1; //_/src
                        // Reg valid for this source, based on instruction type.
                        assign L1_is_reg_a1 = FETCH_Instr_is_r_type_a1 || FETCH_Instr_is_r4_type_a1 || (FETCH_Instr_is_i_type_a1 && (src == 1)) || FETCH_Instr_is_ri_type_a1 || FETCH_Instr_is_s_type_a1 || FETCH_Instr_is_b_type_a1;
                        assign L1_reg_a1[4:0] = (src == 1) ? FETCH_Instr_raw_rs1_a1 : FETCH_Instr_raw_rs2_a1; end
                          
                     // For debug.
                     assign FETCH_Instr_mnemonic_a1[10*8-1:0] = FETCH_Instr_is_lui_instr_a1 ? "LUI       " : FETCH_Instr_is_auipc_instr_a1 ? "AUIPC     " : FETCH_Instr_is_jal_instr_a1 ? "JAL       " : FETCH_Instr_is_jalr_instr_a1 ? "JALR      " : FETCH_Instr_is_beq_instr_a1 ? "BEQ       " : FETCH_Instr_is_bne_instr_a1 ? "BNE       " : FETCH_Instr_is_blt_instr_a1 ? "BLT       " : FETCH_Instr_is_bge_instr_a1 ? "BGE       " : FETCH_Instr_is_bltu_instr_a1 ? "BLTU      " : FETCH_Instr_is_bgeu_instr_a1 ? "BGEU      " : FETCH_Instr_is_lb_instr_a1 ? "LB        " : FETCH_Instr_is_lh_instr_a1 ? "LH        " : FETCH_Instr_is_lw_instr_a1 ? "LW        " : FETCH_Instr_is_lbu_instr_a1 ? "LBU       " : FETCH_Instr_is_lhu_instr_a1 ? "LHU       " : FETCH_Instr_is_sb_instr_a1 ? "SB        " : FETCH_Instr_is_sh_instr_a1 ? "SH        " : FETCH_Instr_is_sw_instr_a1 ? "SW        " : FETCH_Instr_is_addi_instr_a1 ? "ADDI      " : FETCH_Instr_is_slti_instr_a1 ? "SLTI      " : FETCH_Instr_is_sltiu_instr_a1 ? "SLTIU     " : FETCH_Instr_is_xori_instr_a1 ? "XORI      " : FETCH_Instr_is_ori_instr_a1 ? "ORI       " : FETCH_Instr_is_andi_instr_a1 ? "ANDI      " : FETCH_Instr_is_slli_instr_a1 ? "SLLI      " : FETCH_Instr_is_srli_srai_instr_a1 ? "SRLI_SRAI " : FETCH_Instr_is_add_sub_instr_a1 ? "ADD_SUB   " : FETCH_Instr_is_sll_instr_a1 ? "SLL       " : FETCH_Instr_is_slt_instr_a1 ? "SLT       " : FETCH_Instr_is_sltu_instr_a1 ? "SLTU      " : FETCH_Instr_is_xor_instr_a1 ? "XOR       " : FETCH_Instr_is_srl_sra_instr_a1 ? "SRL_SRA   " : FETCH_Instr_is_or_instr_a1 ? "OR        " : FETCH_Instr_is_and_instr_a1 ? "AND       " :  "ILLEGAL   ";
                  // Condition signals must not themselves be conditioned (currently).
                  assign FETCH_Instr_valid_decode_branch_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_branch_a1;
                  assign FETCH_Instr_dest_reg_a1[4:0] = FETCH_Instr_returning_ld_a1 ? FETCH_Instr_returning_ld_dest_reg_a1 : FETCH_Instr_raw_rd_a1;
                  assign FETCH_Instr_dest_reg_valid_a1 = ((FETCH_Instr_valid_decode_a1 && ! FETCH_Instr_is_s_type_a1 && ! FETCH_Instr_is_b_type_a1) || FETCH_Instr_returning_ld_a1) &&
                                    | FETCH_Instr_dest_reg_a1;   // r0 not valid.
                  // Actually load.
                  assign FETCH_Instr_spec_ld_a1 = FETCH_Instr_valid_decode_a1 && FETCH_Instr_ld_a1;
                  
               //_\end_source
               `line 1308 "repos/warp-v/warp-v.tlv" 2
               
               // Returning load doesn't decode the instruction. Provide value to force for dest reg. 
               assign FETCH_Instr_returning_ld_dest_reg_a1[4:0] = MEM_Data_dest_reg_a5;
            
            `line 1228 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1312 as: m4+indirect(['branch_pred_']M4_BRANCH_PRED)
               //_@1
                  //?$branch (but not known yet)
                  assign FETCH_Instr_pred_taken_a1 = FETCH_Instr_BranchState_a4[1];
               //_@2
                  assign FETCH_Instr_branch_or_reset_a2 = FETCH_Instr_branch_a2 || FETCH_Instr_reset_a2;
                  //_?$branch_or_reset
                     assign FETCH_Instr_BranchState_a1[1:0] =
                        FETCH_Instr_reset_a2 ? 2'b01 :
                        FETCH_Instr_taken_a2 ? (FETCH_Instr_BranchState_a2 == 2'b11 ? FETCH_Instr_BranchState_a2[1:0] : FETCH_Instr_BranchState_a2 + 2'b1) :
                                 (FETCH_Instr_BranchState_a2 == 2'b00 ? FETCH_Instr_BranchState_a2[1:0] : FETCH_Instr_BranchState_a2 - 2'b1);
            //_\end_source
            `line 1313 "repos/warp-v/warp-v.tlv" 2
            
            //_@1
               // ======
               // Reg Rd
               // ======
               
               //_/regs
               for (src = 1; src <= 2; src++) begin : L1b_FETCH_Instr_Src logic L1_is_reg_condition_a1; logic [31:0] L1_reg_value_a1, L1_reg_value_a2; //_/src
                  assign L1_is_reg_condition_a1 = L1_FETCH_Instr_Src[src].L1_is_reg_a1 && FETCH_Instr_valid_decode_a1;
                  //_?$is_reg_condition
                     assign L1_reg_value_a1[31:0] =
                        
                        // Bypass stages:
                        (FETCH_Instr_valid_dest_reg_valid_a2 && (FETCH_Instr_dest_reg_a2 == L1_FETCH_Instr_Src[src].L1_reg_a1)) ? FETCH_Instr_rslt_a2 :
                        (FETCH_Instr_valid_dest_reg_valid_a3 && (FETCH_Instr_dest_reg_a3 == L1_FETCH_Instr_Src[src].L1_reg_a1)) ? FETCH_Instr_rslt_a3 :
                        
                        FETCH_Instr_Regs_Value_a3[L1_FETCH_Instr_Src[src].L1_reg_a1];
                  assign FETCH_Instr_Src_replay_a1[src] = L1_is_reg_condition_a1 && FETCH_Instr_Regs_next_pending_a2[L1_FETCH_Instr_Src[src].L1_reg_a1]; end
               assign FETCH_Instr_replay_a1 = | FETCH_Instr_Src_replay_a1 || (FETCH_Instr_dest_reg_valid_a1 && FETCH_Instr_Regs_next_pending_a2[FETCH_Instr_dest_reg_a1]);
            
            
            // =======
            // Execute
            // =======
            `line 1019 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1337 as: m4+indirect(M4_isa['_exe'], @M4_EXECUTE_STAGE, @M4_RESULT_STAGE)
               //_@1
                  //_?$valid_decode_branch
                     assign FETCH_Instr_branch_target_a1[29:2] = FETCH_Instr_Pc_a1 + FETCH_Instr_raw_b_imm_a1[29:2];
                     // TODO: Deal with misaligned address.
               //_@2
                  // Execution.
                  assign FETCH_Instr_valid_exe_a2 = FETCH_Instr_valid_decode_a2; // Execute if we decoded.
                  
                  // Compute results for each instruction, independent of decode (power-hungry, but fast).
                  //_?$valid_exe
                     assign FETCH_Instr_equal_a2 = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 == L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                  //_?$valid_branch
                     assign FETCH_Instr_taken_a2 =
                        FETCH_Instr_is_j_type_a2 ||
                        (FETCH_Instr_is_beq_instr_a2 && FETCH_Instr_equal_a2) ||
                        (FETCH_Instr_is_bne_instr_a2 && ! FETCH_Instr_equal_a2) ||
                        ((FETCH_Instr_is_blt_instr_a2 || FETCH_Instr_is_bltu_instr_a2 || FETCH_Instr_is_bge_instr_a2 || FETCH_Instr_is_bgeu_instr_a2) &&
                         ((FETCH_Instr_is_bge_instr_a2 || FETCH_Instr_is_bgeu_instr_a2) ^
                          ({(FETCH_Instr_is_blt_instr_a2 ^ L1b_FETCH_Instr_Src[1].L1_reg_value_a2[31]), L1b_FETCH_Instr_Src[1].L1_reg_value_a2[31-1:0]} <
                           {(FETCH_Instr_is_blt_instr_a2 ^ L1b_FETCH_Instr_Src[2].L1_reg_value_a2[31]), L1b_FETCH_Instr_Src[2].L1_reg_value_a2[31-1:0]}
                          )
                         )
                        );
                  //_?$valid_jump
                     assign FETCH_Instr_jump_target_a2[29:2] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2[29:2] + FETCH_Instr_raw_i_imm_a2[29:2];
                     // TODO: This assumes aligned addresses. Must deal with zeroing of byte bit and misaligned address.
                  //_?$valid_exe
                     // Compute each individual instruction result, combined per-instruction by a macro.
                     
                     assign FETCH_Instr_lui_rslt_a2[31:0] = FETCH_Instr_raw_u_imm_a2;
                     assign FETCH_Instr_auipc_rslt_a2[31:0] = FETCH_Instr_Pc_a2 + FETCH_Instr_raw_u_imm_a2;
                     assign FETCH_Instr_jal_rslt_a2[31:0] = FETCH_Instr_Pc_a2 + 1;
                     assign FETCH_Instr_jalr_rslt_a2[31:0] = FETCH_Instr_Pc_a2 + 1;
                     assign FETCH_Instr_beq_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_bne_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_blt_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_bge_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_bltu_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_bgeu_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_lb_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_lh_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_lw_rslt_a2[31:0] = FETCH_Instr_returning_ld_data_a2;
                     assign FETCH_Instr_lbu_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_lhu_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_sb_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_sh_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_sw_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_addi_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 + FETCH_Instr_raw_i_imm_a2;  // Note: this has its own adder; could share w/ add/sub.
                     assign FETCH_Instr_slti_rslt_a2[31:0] = (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 < FETCH_Instr_raw_i_imm_a2) ? 1 : 0 ;
                     assign FETCH_Instr_sltiu_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_xori_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 ^ FETCH_Instr_raw_i_imm_a2;
                     assign FETCH_Instr_ori_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 | FETCH_Instr_raw_i_imm_a2;
                     assign FETCH_Instr_andi_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 & FETCH_Instr_raw_i_imm_a2;
                     assign FETCH_Instr_slli_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 << L1b_FETCH_Instr_Src[2].L1_reg_value_a2[4:0];
                     assign FETCH_Instr_srli_srai_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_add_sub_rslt_a2[31:0] =  L1b_FETCH_Instr_Src[1].L1_reg_value_a2 + L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                     assign FETCH_Instr_sll_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 << L1b_FETCH_Instr_Src[2].L1_reg_value_a2[4:0];
                     assign FETCH_Instr_slt_rslt_a2[31:0] = (L1b_FETCH_Instr_Src[1].L1_reg_value_a2 < L1b_FETCH_Instr_Src[2].L1_reg_value_a2) ? 1 : 0;
                     assign FETCH_Instr_sltu_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_xor_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 ^ L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                     assign FETCH_Instr_srl_sra_rslt_a2[31:0] = 32'b0;
                     assign FETCH_Instr_or_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 | L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
                     assign FETCH_Instr_and_rslt_a2[31:0] = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 & L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
               //_@2
                  //_?$valid_ld_st
                     assign {FETCH_Instr_addr_a2[29:0], FETCH_Instr_misaligned_addr_bits_a2[1:0]} = L1b_FETCH_Instr_Src[1].L1_reg_value_a2 + (FETCH_Instr_ld_a2 ? FETCH_Instr_raw_i_imm_a2 : FETCH_Instr_raw_s_imm_a2);
                     `BOGUS_USE(FETCH_Instr_misaligned_addr_bits_a2)
                     // TODO: This assumes word-aligned addresses and doesn't treat lower bits properly.
                  //_?$valid_st
                     assign FETCH_Instr_st_value_a2[31:0] = L1b_FETCH_Instr_Src[2].L1_reg_value_a2;
            
               //_@2
                  // Mux the correct result.
                  `line 959 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1092 as: m4+riscv_rslt_mux_expr()
                     assign FETCH_Instr_rslt_a2[31:0] = 
                         FETCH_Instr_returning_ld_a2 ? FETCH_Instr_returning_ld_data_a2 :
                         32'b0 |
                         ({32{FETCH_Instr_is_lui_instr_a2}} & FETCH_Instr_lui_rslt_a2) |
                         ({32{FETCH_Instr_is_auipc_instr_a2}} & FETCH_Instr_auipc_rslt_a2) |
                         ({32{FETCH_Instr_is_jal_instr_a2}} & FETCH_Instr_jal_rslt_a2) |
                         ({32{FETCH_Instr_is_jalr_instr_a2}} & FETCH_Instr_jalr_rslt_a2) |
                         ({32{FETCH_Instr_is_lb_instr_a2}} & FETCH_Instr_lb_rslt_a2) |
                         ({32{FETCH_Instr_is_lh_instr_a2}} & FETCH_Instr_lh_rslt_a2) |
                         ({32{FETCH_Instr_is_lw_instr_a2}} & FETCH_Instr_lw_rslt_a2) |
                         ({32{FETCH_Instr_is_lbu_instr_a2}} & FETCH_Instr_lbu_rslt_a2) |
                         ({32{FETCH_Instr_is_lhu_instr_a2}} & FETCH_Instr_lhu_rslt_a2) |
                         ({32{FETCH_Instr_is_addi_instr_a2}} & FETCH_Instr_addi_rslt_a2) |
                         ({32{FETCH_Instr_is_slti_instr_a2}} & FETCH_Instr_slti_rslt_a2) |
                         ({32{FETCH_Instr_is_sltiu_instr_a2}} & FETCH_Instr_sltiu_rslt_a2) |
                         ({32{FETCH_Instr_is_xori_instr_a2}} & FETCH_Instr_xori_rslt_a2) |
                         ({32{FETCH_Instr_is_ori_instr_a2}} & FETCH_Instr_ori_rslt_a2) |
                         ({32{FETCH_Instr_is_andi_instr_a2}} & FETCH_Instr_andi_rslt_a2) |
                         ({32{FETCH_Instr_is_slli_instr_a2}} & FETCH_Instr_slli_rslt_a2) |
                         ({32{FETCH_Instr_is_srli_srai_instr_a2}} & FETCH_Instr_srli_srai_rslt_a2) |
                         ({32{FETCH_Instr_is_add_sub_instr_a2}} & FETCH_Instr_add_sub_rslt_a2) |
                         ({32{FETCH_Instr_is_sll_instr_a2}} & FETCH_Instr_sll_rslt_a2) |
                         ({32{FETCH_Instr_is_slt_instr_a2}} & FETCH_Instr_slt_rslt_a2) |
                         ({32{FETCH_Instr_is_sltu_instr_a2}} & FETCH_Instr_sltu_rslt_a2) |
                         ({32{FETCH_Instr_is_xor_instr_a2}} & FETCH_Instr_xor_rslt_a2) |
                         ({32{FETCH_Instr_is_srl_sra_instr_a2}} & FETCH_Instr_srl_sra_rslt_a2) |
                         ({32{FETCH_Instr_is_or_instr_a2}} & FETCH_Instr_or_rslt_a2) |
                         ({32{FETCH_Instr_is_and_instr_a2}} & FETCH_Instr_and_rslt_a2);
                  //_\end_source
                  `line 1093 "repos/warp-v/warp-v.tlv" 2
               
            //_\end_source
            `line 1338 "repos/warp-v/warp-v.tlv" 2
                  
            //_@2
               assign FETCH_Instr_valid_ld_st_a2 = FETCH_Instr_valid_ld_a2 || FETCH_Instr_valid_st_a2;
   
               // =========
               // Target PC
               // =========
               
               assign FETCH_Instr_mispred_branch_a2 = FETCH_Instr_branch_a2 && ! (FETCH_Instr_conditional_branch_a2 && ! FETCH_Instr_taken_a2);
               assign FETCH_Instr_valid_jump_a2 = FETCH_Instr_jump_a2 && ! FETCH_Instr_squash_a2;
               assign FETCH_Instr_valid_branch_a2 = FETCH_Instr_branch_a2 && ! FETCH_Instr_squash_a2;
               assign FETCH_Instr_valid_pred_taken_branch_a2 = FETCH_Instr_valid_branch_a2 && FETCH_Instr_pred_taken_a2;
               assign FETCH_Instr_valid_mispred_branch_a2 = FETCH_Instr_mispred_branch_a2 && ~FETCH_Instr_squash_a2;
               assign FETCH_Instr_valid_dest_reg_valid_a2 = ! FETCH_Instr_squash_a2 && FETCH_Instr_dest_reg_valid_a2;
               assign FETCH_Instr_valid_ld_a2 = FETCH_Instr_ld_a2 && ! FETCH_Instr_squash_a2;
               assign FETCH_Instr_valid_st_a2 = FETCH_Instr_st_a2 && ! FETCH_Instr_squash_a2;
               assign FETCH_Instr_valid_illegal_a2 = FETCH_Instr_illegal_a2 && ! FETCH_Instr_squash_a2;
               `BOGUS_USE(FETCH_Instr_valid_illegal_a2)
               // Squash. Keep a count of the number of cycles remaining in the shadow of a mispredict.
               // Also, squash on ! $valid_exe not valid.
               assign FETCH_Instr_squash_a2 = ! FETCH_Instr_valid_exe_a2 || (| FETCH_Instr_SquashCnt_a2) || FETCH_Instr_returning_ld_a2 || FETCH_Instr_replay_a2;
               assign FETCH_Instr_SquashCnt_a1[2:0] =
                  FETCH_Instr_reset_a2                ? 3'b0 :
                  FETCH_Instr_valid_pred_taken_branch_a2 ? 3 :
                  FETCH_Instr_valid_mispred_branch_a2 ? 3 :
                  FETCH_Instr_valid_jump_a2           ? 3 :
                  FETCH_Instr_replay_a2               ? 4 - 3'b1:
                  FETCH_Instr_SquashCnt_a2 == 3'b0    ? 3'b0 :
                                          FETCH_Instr_SquashCnt_a2 - 3'b1;
                                          
               assign FETCH_Instr_returning_ld_data_a2[31:0] = MEM_Data_ld_rslt_a6;
      `line 1171 "repos/warp-v/warp-v.tlv" 1   // Instantiated from repos/warp-v/warp-v.tlv, 1369 as: m4+fixed_latency_fake_memory(/top, 0)
         //_|fetch
            //_/instr
               // ====
               // Load
               // ====
               
               //_/mem
               //_?$spec_ld
                  //_@3
                     assign FETCH_Instr_ld_rslt_a3[31:0] = FETCH_Instr_Mem_Word_a3[FETCH_Instr_addr_a3[4:0]];
               
               // Array writes are not currently permitted to use assignment
               // syntax, so \always_comb is used, and this must be outside of
               // when conditions, so we need to use if. <<1 because no <= support
               // in this context. (This limitation will be lifted.)
      
               //_@3
                  // =====
                  // Store
                  // =====
      
                  always_comb begin
                     if (FETCH_Instr_valid_st_a3)
                        FETCH_Instr_Mem_Word_a2[FETCH_Instr_addr_a3[4:0]][31:0] = FETCH_Instr_st_value_a3; end
      
         // Return loads in |mem pipeline. We just hook up the |mem pipeline to the |fetch pipeline w/ the
         // right alignment.
         //_|mem
            //_/data
               //_@3
                  assign {MEM_Data_dest_reg_a3[4:0], MEM_Data_ld_rslt_a3[31:0], MEM_Data_valid_ld_a3} = {FETCH_Instr_dest_reg_a3, FETCH_Instr_ld_rslt_a3, FETCH_Instr_valid_ld_a3};
      //_\end_source
      `line 1370 "repos/warp-v/warp-v.tlv" 2
      //_|fetch
         //_/instr
            //_@3
               // =========
               // Reg Write
               // =========
   
               assign FETCH_Instr_reg_write_a3 = FETCH_Instr_reset_a3 ? 1'b0 : (FETCH_Instr_valid_dest_reg_valid_a3) || FETCH_Instr_returning_ld_a3;
               always_comb begin
                  if (FETCH_Instr_reg_write_a3)
                     FETCH_Instr_Regs_Value_a2[FETCH_Instr_dest_reg_a3][31:0] = FETCH_Instr_rslt_a3; end
            
            // There's no bypass on pending, so we must write the same cycle we read.
            //_@2
               for (regs = 1; regs <= 31; regs++) begin : L1b_FETCH_Instr_Regs logic L1_reg_match_a2; //_/regs
                  assign L1_reg_match_a2 = FETCH_Instr_dest_reg_a2 == regs;
                  assign FETCH_Instr_Regs_next_pending_a2[regs] =  // Should be state, but need to consume prior to flop, which SandPiper doesn't support, yet.
                     FETCH_Instr_reset_a2 ? 1'b0 :
                     // set for loads
                     FETCH_Instr_valid_ld_a2 && L1_reg_match_a2   ? 1'b1 :
                     // clear when load returns
                     FETCH_Instr_returning_ld_a2 && L1_reg_match_a2 ? 1'b0 :
                                  FETCH_Instr_Regs_next_pending_a3[regs]; end
      
   //_\end_source
   `line 1406 "repos/warp-v/warp-v.tlv" 2

   
   // Assert these to end simulation (before Makerchip cycle limit).
   assign passed = ! reset;
   assign failed = ! reset; endgenerate
//_\SV
   endmodule
